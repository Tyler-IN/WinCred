name: .NET

on:
  workflow_call:
    inputs:
      tag:
        required: false
        type: string
  workflow_dispatch: 
    inputs:
      tag:
        description: 'Tag to do a build for, or leave empty for latest'
        required: false
        type: string
  push:
    branches: [ "main" ]
    tags: [ "v**" ]

defaults:
  run:
    shell: bash

jobs:
  skip_check:
    name: Skip Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      -   name: Check if duplicate action
          id: skip_check
          uses: fkirc/skip-duplicate-actions@master
          with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile"]'

  build_and_test_on_windows:
    name: Build & Test
    runs-on: windows-2025
    needs: skip_check
    if: ${{ (needs.skip_check.outputs.should_skip != 'true') || (github.ref_type == 'tag' && startsWith(github.ref_name, 'v')) }}
    steps:
      - uses: actions/checkout@v4.2.2
        name: Checkout (Workflow Call)
        if: ${{ inputs.tag != '' }}
        with:
          show-progress: false
          ref: ${{ inputs.tag }}
          fetch-tags: true
      - uses: actions/checkout@v4.2.2
        name: Checkout (Workflow Dispatch)
        if: ${{ github.event.inputs.tag != '' && inputs.tag == '' }}
        with:
          show-progress: false
          ref: ${{ github.event.inputs.tag }}
          fetch-tags: true
      - uses: actions/checkout@v4.2.2
        name: Checkout (Default)
        if: ${{ inputs.tag == '' && github.event.inputs.tag == '' }}
        with:
          show-progress: false
          fetch-tags: true
      - name: Fetch commits between latest tag and current checkout
        run: |
          git fetch --tags
          git fetch --shallow-since=$(git log -1 --format=%at $(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1)))
      - name: Restore Cache
        id: restore-cache
        if: always()
        uses: actions/cache/restore@v4.2.3
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          path: |
            C:/Users/runneradmin/.nuget/packages
            C:/Users/runneradmin/AppData/Local/NuGet/http-cache
            C:/Users/runneradmin/AppData/Local/NuGet/plugins-cache
            C:/Users/runneradmin/AppData/Local/NuGet/v3-cache
            C:/Users/runneradmin/AppData/Local/NuGet/Cache
      - name: Hash NuPkg Cache Before Restore
        id: restored-cache-hash
        run: |
          shopt -s globstar nullglob
          
          globs=(
            ~/.nuget/packages/**
            ~/AppData/Local/NuGet/http-cache/**
            ~/AppData/Local/NuGet/plugins-cache
            ~/AppData/Local/NuGet/v3-cache
            ~/AppData/Local/NuGet/Cache
          )
          
          files=()
          for pattern in "${globs[@]}"; do
            for f in $pattern; do
              files+=("$f")
            done
          done
          
          if [ ${#files[@]} -eq 0 ]; then
            echo "hash=no-files" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          sorted_files=($(printf "%s\n" "${files[@]}" | sort))
          
          hash=$(for f in "${sorted_files[@]}"; do
            if [ -f "$f" ]; then
              echo "$f"
              cat "$f"
            fi
          done | sha256sum | cut -d' ' -f1)
          
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "${hash}"
      - name: Restore
        if: always()
        run: dotnet restore -p:Configuration=Release
      - name: Hash NuPkg Cache After Restore
        id: updated-cache-hash
        run: |
          shopt -s globstar nullglob
          
          globs=(
            ~/.nuget/packages/**
            ~/AppData/Local/NuGet/http-cache/**
            ~/AppData/Local/NuGet/plugins-cache
            ~/AppData/Local/NuGet/v3-cache
            ~/AppData/Local/NuGet/Cache
          )
          
          files=()
          for pattern in "${globs[@]}"; do
            for f in $pattern; do
              files+=("$f")
            done
          done
          
          if [ ${#files[@]} -eq 0 ]; then
            echo "hash=no-files" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          sorted_files=($(printf "%s\n" "${files[@]}" | sort))
          
          hash=$(for f in "${sorted_files[@]}"; do
            if [ -f "$f" ]; then
              echo "$f"
              cat "$f"
            fi
          done | sha256sum | cut -d' ' -f1)
          
          echo "hash=$hash" >> $GITHUB_OUTPUT
          echo "${hash}"
      - name: Save Cache
        id: save-cache
        if: always() && steps.restored-cache-hash.outputs.hash != steps.updated-cache-hash.outputs.hash
        uses: actions/cache/save@v4.2.3
        with:
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
          path: |
            C:/Users/runneradmin/.nuget/packages
            C:/Users/runneradmin/AppData/Local/NuGet/http-cache
            C:/Users/runneradmin/AppData/Local/NuGet/plugins-cache
            C:/Users/runneradmin/AppData/Local/NuGet/v3-cache
            C:/Users/runneradmin/AppData/Local/NuGet/Cache
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal
      - name: Push Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Artifacts
          path: artifacts/*
          compression-level: 0
      - name: Attach Artifacts To Release
        if: always() && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
        uses: ncipollo/release-action@v1.16.0
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: artifacts/*
          token: ${{ secrets.PAT_GH_PKG_MGMT }}
      - name: Push Tagged Package
        if: always() && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
        run: >-
          dotnet nuget add source
          --username ${{ github.repository_owner }}
          --password ${{ secrets.GITHUB_TOKEN }}
          --store-password-in-clear-text
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          
          dotnet nuget push artifacts/*.nupkg -s "github" -k ${{ secrets.PAT_GH_PKG_MGMT }} --skip-duplicate --no-symbols
    env:
      DOTNET_NOLOGO: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_MULTILEVEL_LOOKUP: 0
      DOTNET_SYSTEM_NET_HTTP_SOCKETSHTTPHANDLER_HTTP3SUPPORT: 1
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
      DOTNET_SYSTEM_GLOBALIZATION_PREDEFINED_CULTURES_ONLY: 1
      DOTNET_SYSTEM_NET_SOCKETS_INLINE_COMPLETIONS: 1
      DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 1
      DOTNET_CLI_FORCE_UTF8_ENCODING: 1
      DOTNET_DISABLE_GUI_ERRORS: 1
      DOTNET_CLI_CONTEXT_ANSI_PASS_THRU: 1
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      DOTNET_CLI_WORKLOAD_UPDATE_NOTIFY_DISABLE: 1
      DOTNET_USE_POLLING_FILE_WATCHER: 0
      NUGET_XMLDOC_MODE: skip
      DOTNET_EnableDiagnostics: 0
      DOTNET_EnableEventPipe: 0